<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="83" failures="0" errors="0" time="0.898">
  <testsuite name="iter" errors="0" failures="0" skipped="0" timestamp="2022-06-09T12:03:00" time="0.874" tests="83">
    <testcase classname="iter should create an array iterator" name="iter should create an array iterator" time="0.001">
    </testcase>
    <testcase classname="iter should create a single element iterator" name="iter should create a single element iterator" time="0">
    </testcase>
    <testcase classname="range should iterate over the range 1..4" name="range should iterate over the range 1..4" time="0">
    </testcase>
    <testcase classname="range should iterate over the range 0..-6" name="range should iterate over the range 0..-6" time="0">
    </testcase>
    <testcase classname="range should iterate indefinitely" name="range should iterate indefinitely" time="0.001">
    </testcase>
    <testcase classname="range should iterate forward" name="range should iterate forward" time="0">
    </testcase>
    <testcase classname="range should iterate backward" name="range should iterate backward" time="0.001">
    </testcase>
    <testcase classname="collect should consume the iterator into a collection" name="collect should consume the iterator into a collection" time="0">
    </testcase>
    <testcase classname="collect should consume the empty iterator into an empty collection" name="collect should consume the empty iterator into an empty collection" time="0">
    </testcase>
    <testcase classname="map should map iterator values" name="map should map iterator values" time="0">
    </testcase>
    <testcase classname="filter should filter iterator values using a predicate" name="filter should filter iterator values using a predicate" time="0">
    </testcase>
    <testcase classname="skip should drop n values from the iterator" name="skip should drop n values from the iterator" time="0">
    </testcase>
    <testcase classname="skip should return empty iterator if skip is too large" name="skip should return empty iterator if skip is too large" time="0">
    </testcase>
    <testcase classname="skip should throw on negative skip" name="skip should throw on negative skip" time="0.031">
    </testcase>
    <testcase classname="skip while should skip while predicate is true" name="skip while should skip while predicate is true" time="0">
    </testcase>
    <testcase classname="skip while should give empty iterator if predicate is always true" name="skip while should give empty iterator if predicate is always true" time="0">
    </testcase>
    <testcase classname="skip while should be no-op if predicate is always false" name="skip while should be no-op if predicate is always false" time="0">
    </testcase>
    <testcase classname="take should take n values from the iterator" name="take should take n values from the iterator" time="0">
    </testcase>
    <testcase classname="take should be no-op if take is too large" name="take should be no-op if take is too large" time="0">
    </testcase>
    <testcase classname="take should throw on negative take" name="take should throw on negative take" time="0.001">
    </testcase>
    <testcase classname="take while should take while predicate is true" name="take while should take while predicate is true" time="0">
    </testcase>
    <testcase classname="take while should be no-op if predicate is always true" name="take while should be no-op if predicate is always true" time="0">
    </testcase>
    <testcase classname="take while should give empty iterator if predicate is always false" name="take while should give empty iterator if predicate is always false" time="0">
    </testcase>
    <testcase classname="reduce should reduce without initializer" name="reduce should reduce without initializer" time="0">
    </testcase>
    <testcase classname="reduce should reduce with same type initializer" name="reduce should reduce with same type initializer" time="0">
    </testcase>
    <testcase classname="reduce should throw on reduce without initializer and empty iterator" name="reduce should throw on reduce without initializer and empty iterator" time="0">
    </testcase>
    <testcase classname="reduce should reduce with different type initializer" name="reduce should reduce with different type initializer" time="0.001">
    </testcase>
    <testcase classname="accumulate should accumulate elements using callback" name="accumulate should accumulate elements using callback" time="0">
    </testcase>
    <testcase classname="accumulate should accumulate elements using callback and initializer" name="accumulate should accumulate elements using callback and initializer" time="0">
    </testcase>
    <testcase classname="accumulate should throw on accumulate without initializer and empty iterator" name="accumulate should throw on accumulate without initializer and empty iterator" time="0">
    </testcase>
    <testcase classname="count should return the iterator length" name="count should return the iterator length" time="0">
    </testcase>
    <testcase classname="rate should return the percentage of values satisfying the predicate" name="rate should return the percentage of values satisfying the predicate" time="0">
    </testcase>
    <testcase classname="flatten should flatten array of arrays" name="flatten should flatten array of arrays" time="0">
    </testcase>
    <testcase classname="flatten should flatten mixed depth array" name="flatten should flatten mixed depth array" time="0">
    </testcase>
    <testcase classname="flatten should deep flatten mixed depth array" name="flatten should deep flatten mixed depth array" time="0">
    </testcase>
    <testcase classname="flatten should no-op on 0 depth" name="flatten should no-op on 0 depth" time="0">
    </testcase>
    <testcase classname="chunks should chunk" name="chunks should chunk" time="0">
    </testcase>
    <testcase classname="chunks should chunk with leftover" name="chunks should chunk with leftover" time="0">
    </testcase>
    <testcase classname="chunks should chunk empty iterator" name="chunks should chunk empty iterator" time="0">
    </testcase>
    <testcase classname="windows should slide window" name="windows should slide window" time="0">
    </testcase>
    <testcase classname="windows should slide window with len larger than size" name="windows should slide window with len larger than size" time="0.001">
    </testcase>
    <testcase classname="windows should throw on window length &lt;= 0" name="windows should throw on window length &lt;= 0" time="0">
    </testcase>
    <testcase classname="enumerate should enumerate" name="enumerate should enumerate" time="0">
    </testcase>
    <testcase classname="step should step by 3" name="step should step by 3" time="0">
    </testcase>
    <testcase classname="step should no-op on empty iterator" name="step should no-op on empty iterator" time="0">
    </testcase>
    <testcase classname="step should error on step &lt;= 0" name="step should error on step &lt;= 0" time="0">
    </testcase>
    <testcase classname="zip should zip same len iterators" name="zip should zip same len iterators" time="0.001">
    </testcase>
    <testcase classname="zip should zip diff len iterators and stop when any iterator ends" name="zip should zip diff len iterators and stop when any iterator ends" time="0">
    </testcase>
    <testcase classname="zip should not error on empty zip" name="zip should not error on empty zip" time="0">
    </testcase>
    <testcase classname="zip should not yield from zipped iterator on empty base iterator" name="zip should not yield from zipped iterator on empty base iterator" time="0">
    </testcase>
    <testcase classname="unzip should unzip zipped iterators" name="unzip should unzip zipped iterators" time="0">
    </testcase>
    <testcase classname="unzip should unzip tuple iterators" name="unzip should unzip tuple iterators" time="0">
    </testcase>
    <testcase classname="unzip should throw when unzipping on iterator of non-iterables" name="unzip should throw when unzipping on iterator of non-iterables" time="0">
    </testcase>
    <testcase classname="flat map should map then flatten" name="flat map should map then flatten" time="0">
    </testcase>
    <testcase classname="partition should partition" name="partition should partition" time="0">
    </testcase>
    <testcase classname="partition should partition with true predicate" name="partition should partition with true predicate" time="0">
    </testcase>
    <testcase classname="nth should get nth when it exists" name="nth should get nth when it exists" time="0.002">
    </testcase>
    <testcase classname="nth should get undefined when nth does not exist" name="nth should get undefined when nth does not exist" time="0">
    </testcase>
    <testcase classname="first/last should get first" name="first/last should get first" time="0">
    </testcase>
    <testcase classname="first/last should get last" name="first/last should get last" time="0">
    </testcase>
    <testcase classname="every/some some should return true on any predicate call true" name="every/some some should return true on any predicate call true" time="0">
    </testcase>
    <testcase classname="every/some every should return true on all predicate calls true" name="every/some every should return true on all predicate calls true" time="0.001">
    </testcase>
    <testcase classname="find should find predicate element" name="find should find predicate element" time="0">
    </testcase>
    <testcase classname="find should return undefined on not found" name="find should return undefined on not found" time="0">
    </testcase>
    <testcase classname="position should find predicate element&apos;s position" name="position should find predicate element&apos;s position" time="0">
    </testcase>
    <testcase classname="position should return undefined on not found" name="position should return undefined on not found" time="0">
    </testcase>
    <testcase classname="chain should chain two iterators" name="chain should chain two iterators" time="0">
    </testcase>
    <testcase classname="chain should chain multiple different type iterators" name="chain should chain multiple different type iterators" time="0">
    </testcase>
    <testcase classname="cycle should cycle indefinitely" name="cycle should cycle indefinitely" time="0">
    </testcase>
    <testcase classname="cycle should cycle 3 times" name="cycle should cycle 3 times" time="0">
    </testcase>
    <testcase classname="cycle should throw on negative cycle count" name="cycle should throw on negative cycle count" time="0.001">
    </testcase>
    <testcase classname="for each should iterate and invoke callback with elem, index" name="for each should iterate and invoke callback with elem, index" time="0">
    </testcase>
    <testcase classname="min by key should get min using key predicate" name="min by key should get min using key predicate" time="0">
    </testcase>
    <testcase classname="max by key should get max using key predicate" name="max by key should get max using key predicate" time="0">
    </testcase>
    <testcase classname="unique, uniqueBy should filter out duplicates" name="unique, uniqueBy should filter out duplicates" time="0">
    </testcase>
    <testcase classname="inspect should invoke callback on yielded values" name="inspect should invoke callback on yielded values" time="0">
    </testcase>
    <testcase classname="slice should filter out values outside the slice range" name="slice should filter out values outside the slice range" time="0">
    </testcase>
    <testcase classname="slice should throw on invalid range" name="slice should throw on invalid range" time="0">
    </testcase>
    <testcase classname="nest, nestRange should create a 2D iterator" name="nest, nestRange should create a 2D iterator" time="0">
    </testcase>
    <testcase classname="nest, nestRange should create a 2D iterator" name="nest, nestRange should create a 2D iterator" time="0.001">
    </testcase>
    <testcase classname="chaos should work" name="chaos should work" time="0">
    </testcase>
    <testcase classname="chaos should draw a zigzag pattern in the matrix" name="chaos should draw a zigzag pattern in the matrix" time="0">
    </testcase>
    <testcase classname="chaos should compute the rate of space chars per line after doubling each char + wrapping on row length 8" name="chaos should compute the rate of space chars per line after doubling each char + wrapping on row length 8" time="0">
    </testcase>
  </testsuite>
</testsuites>